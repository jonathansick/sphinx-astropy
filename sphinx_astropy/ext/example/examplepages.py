# Licensed under a 3-clause BSD style license - see LICENSE.rst

__all__ = ('generate_example_page', 'ExampleContentDirective',
           'pending_example', 'process_pending_example_nodes')

from docutils import nodes
from docutils.parsers.rst import Directive
from sphinx.errors import SphinxError
from sphinx.util.logging import getLogger


example_template = """.. Auto-generated by sphinx_astropy.ext.example

{title}
{title_header}

.. example-content:: {example_id}
"""


def generate_example_page(title, tags, example_id, filepath, h1header):
    """Write a page (reStructuredText file) into the documentation source for
    a specific example.

    Parameters
    ----------
    title : str
        The title of an example that was marked up by an ``example`` directive
        (`sphinx_astropy.ext.example.ExampleMarkerDirective`).
    tags : set of str
        A set of tags associated with the example.
    example_id : str
        The ID of the example.
    filepath : str
        The absolute path of the source file for the example page.
    h1header : str
        Character for making up level 1 headers in reStructuredText. For
        example, ``'#'``.
    """
    with open(filepath, 'w') as f:
        f.write(example_template.format(
            example_id=example_id,
            title=title,
            title_header=h1header * len(title)))


class ExampleContentDirective(Directive):
    """Directive that writes an example's content.

    This directive writes out the content of an example marked up by the
    ``example`` directive
    (`sphinx_astropy.ext.example.ExampleMarkerDirective`).
    This directive adds a `pending_example` node to mark where example content
    shoud be written during a `doctree-resolved` event. See
    `process_pending_example_nodes`.

    Example:

    .. code-block:: rst

       .. write-example:: example-src-my-example

    The argument is the ID of the example.
    """

    _logger = getLogger(__name__)

    has_content = False

    required_arguments = 1  # example ID

    def run(self):
        self.example_id = self.arguments[0].strip()
        return [pending_example(self.example_id)]


class pending_example(nodes.General, nodes.Element):
    """A temporary node that marks where example content should be written.

    This node is processed, and replaced, during a ``doctree-resolved`` Sphinx
    event (see `process_pending_example`).

    Parameters
    ----------
    example_id : str
        The example ID, corresponding to an example's key in
        ``env.sphinx_astropy_examples``.
    *args
        General node position arguments.
    **kwargs
        General node keyword arguments
    """

    def __init__(self, example_id, *args, **kwargs):
        self.example_id = example_id
        super().__init__(*args, **kwargs)


def process_pending_example_nodes(app, doctree, docname):
    """Traverses the doctree of a document to replace `pending_example` nodes
    with the content of the example.

    Use this function as a ``doctree-resolved`` event handler.

    Parameters
    ----------
    app : sphinx.application.Sphinx
        The app instance.
    doctree : docutils.nodes.document
        The doctree.
    docname : str
        Name of the document being processed.
    """
    logger = getLogger(__name__)

    logger.debug('[sphinx_astropy] Started processing pending_example nodes '
                 'for %s', docname)

    for node in doctree.traverse(pending_example):
        _process_pending_example_node(node, app)


def _process_pending_example_node(node, app):
    """Replace an individual `pending_example` node with its content
    stored in the environment from the ``example`` directive.

    Parameters
    ----------
    node : `pending_example`
        A `pending_example` node that is replaced with the example content.
    app : sphinx.application.Sphinx
        The app instance.

    See also
    --------
    process_pending_example_nodes
    """
    example_id = node.example_id
    try:
        example_data = app.builder.env.sphinx_astropy_examples[example_id]
    except (AttributeError, KeyError):
        raise SphinxError(
            '[sphinx_astropy] example ID {} was not found in the '
            'environment.'.format(example_id)
        )

    node.replace_self(example_data['content_node'].children)
