# Licensed under a 3-clause BSD style license - see LICENSE.rst

__all__ = ('generate_landing_page', 'generate_tag_page')

import os

landing_template = """.. Auto-generated by sphinx_astropy.ext.example

{title}
{title_header}

.. toctree::
   :hidden:

{toctree_contents}

{examples}
"""
"""Template for an example gallery index.rst file.
"""


def generate_landing_page(examples, dirname, h1header, taginfo):
    """Generate the ``index.rst`` landing page for the example gallery.

    This landing page links to each example (providing a toctree).
    """
    # Generate the hidden toctree contents
    toctree_items = ['   {}'.format(example['docname'])
                     for example in examples]
    tagnames = sorted(taginfo.keys())
    toctree_items.extend(
        ['   {}'.format(taginfo[t]['abs_docname']) for t in tagnames]
    )

    example_list_items = [format_example_item(example, taginfo)
                          for example in examples]

    title = 'Examples'
    landing_page_text = landing_template.format(
        title=title,
        title_header=h1header * len(title),
        toctree_contents='\n'.join(toctree_items),
        examples='\n'.join(example_list_items)
    )

    path = os.path.join(dirname, 'index.rst')
    with open(path, 'w') as f:
        f.write(landing_page_text)


def format_example_item(example, taginfo):
    if example['tags']:
        tag_links = []
        for tagname in sorted(example['tags']):
            tag_links.append(
                ':doc:`{name} <{docname}>`'.format(
                    name=tagname,
                    docname=taginfo[tagname]['abs_docname']
                )
            )
        tag_str = ' (' + ', '.join(tag_links) + ')'
    else:
        tag_str = ''

    return '- :doc:`{title} <{docname}>`{tags}'.format(
        title=example['title'],
        docname=example['abs_docname'],
        tags=tag_str)


tag_page_template = """.. Auto-generated by sphinx_astropy.ext.example

:orphan:

{title}
{title_header}

{examples}
"""


def generate_tag_page(tagname, filepath, examples, h1header, taginfo):
    """Generate a index page for a specific tag.
    """
    example_list_items = [format_example_item(example, taginfo)
                          for example in examples
                          if tagname in example['tags']]

    title = 'Examples tagged "{tagname}"'.format(tagname=tagname)
    page_text = tag_page_template.format(
        title=title,
        title_header=h1header * len(title),
        examples='\n'.join(example_list_items)
    )

    with open(filepath, 'w') as f:
        f.write(page_text)
